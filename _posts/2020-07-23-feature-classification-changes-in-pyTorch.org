---
layout: blog_detail
title: 'Feature Classification Changes in PyTorch.org'
author: PyTorch Team
---

**Background:** This document inventories all of the changes we need to make to pytorch.org (http://pytorch.org/) in order to implement the new feature classification rubric called out in the post [here](https://fb.prod.workplace.com/groups/ToffeeInternal/permalink/667964690448681/). 


## New Feature Designations (need to be wordsmithed for external consumption)

**Stable** - the value-add is proven, the API isn’t expected to change, the feature is performant and all documentation exists to support end user adoption.

Level of commitment: We are committing to maintaining the [Backwards Compatibility](https://www.internalfb.com/intern/wiki/PyTorch/PyTorchDev/BCBreakingProcess/), performance, and documentation going forward.

**Beta**- The value add of the general feature area has been proven (e.g. pruning is a commonly used technique for reducing the number of parameters in NN models, independent of the implementation details of our particular choices) and the feature generally works. This feature is tagged as Beta because the API may change based on user feedback, because the performance needs to improve or because coverage is not yet complete.

<i>Level of commitment</i>: We are committing to seeing the feature through to Stable / GA. We are not committing to [Backwards Compatibility](https://www.internalfb.com/intern/wiki/PyTorch/PyTorchDev/BCBreakingProcess/) Users can depend on us providing a solution for problems in this area going forward, but the APIs and performance characteristics of our solution may change.

**Prototype** - The feature is not broadly available (except maybe behind compile-time or run-time flags), but we would like to get high bandwidth partner feedback (see [#Dogfooding](https://fb.workplace.com/groups/ToffeeInternal/permalink/654476565130827/)) ahead of a real release in order to gauge utility and any changes we need to make to the UX.

<i>Level of commitment</i>: We are committing to gathering high bandwidth partner feedback only. Based on this feedback and potential further engagement, we will decide if we want to upgrade the level of commitment or to fail fast.

## Changes to [PyTorch.org](http://pytorch.org/) 

1. Add a landing page in [pytorch.org/docs](http://pytorch.org/docs) called ‘Feature Designations’ with:
   * 1. the above definitions
   * 2. A list of the early stage features (with hyperlinks) called out below
2. Update feature level designations:
  *  1. beta (was experimental): high level autograd APIs (Greg) - DONE
  *  2. beta (was experimental): eager mode quant (Joe) - DONE
  *  3. prototype (was experimental): named tensors (Greg) - DONE
  *  4. prototype (was experimental): torchscript/rpc (Joe) - DONE
  *  5. Beta (was experimental): channels last (Greg) - DONE
  *  6. Beta (was experimental): custom C++ Classes (Greg) - DONE
  *  7. Beta (was experimental): PyTorch Mobile (Joe) - DONE
  *  8. Beta (was experimental): Java Bindings (Joe)



	
	
    
